#Scaffold Generator for MyActiveRecord and MyActionPack

This system creates a working MAR project by reflecting over your database and 
generating a set of folders and static PHP files containing the basic CRUD
operations for the selected tables.

This initial release only supports stand-alone tables and provides limited
support for parent/child relationships. Future versions will generate 
many-to-many relationship views and `destroy()` functions.

##Install and Setup
To use, move the entire `generate` folder to a Web server, and check/change 
permissions on the `generate/generated_files` sub-folder so that your Apache/PHP 
process can write to that sub-folder.

Open the `scaffold.php` file with a text editor, and update the configuration
at the top of the file to match your server. These credentials will be copied
into the generated site, so you need to run this on the same server as you
intend to use to serve the final project. 

Your site files will be generated (and re-generated) within a folder named
exactly the same as your database, within the `generated_files` directory.
So if you entered the following DSN for your database: `user:pass@localhost/test`
you would find a folder at `generated_files/test` containing all of your site
documents and and an .htaccess file after you generate from your first table.

For bonus points, set up your Web server to host a site from `generated_files/[dbname]`
so you can view your progress as you go. You will need a basic Apache server
with the mod_rewrite engine installed and enabled, and AllowOverrides:all set 
in the server's configuration file.

Once you have finished the site generation process, you can move the [dbname]
folder anywhere you like on your Web server, and host your site from there.
Please note -- the .htaccess and routing.php files are configured to work in the
site root folder. You can change this, but by default, the site will only work
when run from a dedicated hostname, as opposed to a sub-folder.

##Process Your First Table
Visit [./scaffold.php](./scaffold.php) in a browser. You should see a list of
tables within your database. Click on the first table you wish to work from
to begin. The system interprets the following field types at the moment:

* Varchar or Char or Int will become a text input
* Tinyint(1) will become a boolean (checkbox)
* Text will become a textarea
* Date and DateTime columns will become a text input with a special HTML 
classname for further processing with JavaScript
* Any Date or DateTime column that ends in \_at or \_on will be treated as a special
timestamp. If the column is named created\_on or created\_at, or updated\_at or
updated\_on, it will have special setter functions in the Model's `save()` method.
* Any column that ends in \_id will be treated as a foreign key from another table
* Any table which has a foreign key in another table can choose to perform
cascading deletes in its `destroy()` method.

The `id` column is not editable, as it is always your primary key.

###Validations
The following validations are included:

* `validate_regexp()` Enter a regular expression, including delimiters, properly 
escaped. The column must match this regexp in order to pass
* `validate_existence()` The field must not be empty to pass
* `validate_uniqueness_of()` The field must not match the same field in any 
other records in the table (note -- this does not include a test for empty, 
combine with `validate_existence()` to also test for that)
* `validate_email()` This is a combo validator, which tests for presence and 
format

Mix and match the validations as you like.

###Cascading Delete
Dependent delete will be offered as an option if the table includes a field 
named [some other table]\_id. If so, checking this option will include the 
logic to clean up dependent records from that other table. For example, if 
you delete a Blog Post, all of the Comments with a matching posts_id will 
be deleted at the same time. You don't need to choose this if you don't need it.

##Generate the Site
When you press the **Generate** button, all of your files will be created and 
listed. Click the **Start Over** link to select another table and begin this 
process again.

Once you have generated the files for a particular table, they will not be 
overwritten unless you check the "Force" checkbox at the top of the screen. 
If you make changes to your database (add, remove or change columns) you will 
need to check this option to get a fresh set of interface files.

##Install the Site
Move the generated folder [table name] into a new location in your Web server, 
and update your configuration files to serve the site from that new location.

You can edit any of the files, they are all static and do not rely on any
*magic* to work correctly. File **naming** is however very important. Just
as in Rails or its various clones, the location and name of files is used
to link up the various parts of the Model / View / Controller stack.

The content of the Model, View and Controller files is just a suggestion to
get you started. Feel free to add or delete methods to the controller, which
will be mapped automatically to matching URLs. [model]/[controller method]/[id]
is the basic idea. This strategy is set in the routing.php file, and can be
modified there.